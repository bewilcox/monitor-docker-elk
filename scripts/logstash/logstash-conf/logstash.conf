# INPUT
#######################################
input {

	tcp {
		type => "test"
		port => 5000
	}

	file {
		type => "elk"
		path => "/tmp/docker-registry-access.log"
	}


}

# FILTERS
#######################################
filter {

	# JSON conversion of the log
	grok {
		match => {
			"message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion:int}" %{NUMBER:response:int} (?:-|%{NUMBER:bytes:int}) (?:-|%{QS:referrer}) %{QS:agent}'
		}
	}

	# Ignore all ping request (all '/v2/' and '/v1/_ping')
	if [request] =~ /^\/v2\/$|^\/v1\/_ping$/ {
		drop{ }
	}

	# Preserve only the main HTTP request (not the sub-request like /json, /ancestry etc ...)
	# Only the GET,PUT, POST and DELETE on /repositories/{images}/images a log on.
	if [request] !~ /\/v\d\/repositories\/\w*\/\w*\/images/ {
		drop{ }
	}

	# Add the image field
	grok {
		match => {
			"request" => '/v1/repositories/%{DATA:image}/images'
		}
	}

	# Agent decomposition to isolate, docker version, go version, linux archi ...
	grok {
		match => {
			"agent" => '"docker/%{DATA:dockerversion} go/go%{DATA:goversion} %{DATA:gitcommit} %{DATA:archilinux}"'
		}
	}

	# Delete the agent field (it was splitted in others fields)
	mutate {
		remove_field => ["agent"]
	}

}

# OUTPUTS
#######################################
output {

	if [type] == "elk" {
		elasticsearch {
			protocol => "http"
			host => "elasticsearch"
		}
	}

	if [type] == "test" {
		stdout {
    	codec => rubydebug
  	}
	}

}
